name: Deploy to Dev Server

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all apps using Turbo
        run: pnpm turbo run build

      - name: Run tests using Turbo
        run: pnpm turbo run test

  migrate-dev:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: pr-${{ github.event.pull_request.number }}
      FCN_DATABASE_URL: ${{ secrets.DEV_FCN_DATABASE_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm turbo db:generate

      - name: Create .env file for Prisma
        run: |
          echo "FCN_DATABASE_URL=${{ secrets.DEV_FCN_DATABASE_URL }}" > packages/db/.env

      - name: Apply Prisma Migrations to Dev
        run: |
          echo "Applying Prisma migrations to dev database..."
          pnpm turbo db:migrate:deploy

  deploy-dev:
    runs-on: ubuntu-latest
    needs: migrate-dev
    env:
      IMAGE_TAG: pr-${{ github.event.pull_request.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker images
        run: |
          docker build -t faithfulconnects/turbo-repo:${{ env.IMAGE_TAG }} -f docker/Dockerfile .

      - name: Push Docker images
        run: |
          echo "🔹 Pushing Docker images..."
          docker push faithfulconnects/turbo-repo:${{ env.IMAGE_TAG }}

      - name: Log out of Docker Hub
        run: docker logout # 🔐 Prevents secrets exposure

  deploy-to-server:
    runs-on: ubuntu-latest
    needs: deploy-dev
    env:
      IMAGE_TAG: pr-${{ github.event.pull_request.number }}
      FCN_DATABASE_URL: ${{ secrets.DEV_FCN_DATABASE_URL }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_DEV_PRIVATE_KEY }}

      - name: Copy docker-compose.yml to Remote Server
        run: |
          scp docker-compose.yml ${{ secrets.SSH_DEV_USERNAME }}@${{ secrets.SSH_DEV_HOST }}:docker-compose.yml

      - name: Deploy to Development Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          key: ${{ secrets.SSH_DEV_PRIVATE_KEY }}
          envs: IMAGE_TAG, FCN_DATABASE_URL, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, NEXTAUTH_SECRET
          script: |
            echo "🔹 Checking & Installing Dependencies..."

            # ✅ Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "🔹 Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            else
              echo "✅ Docker is already installed."
            fi

            # ✅ Install Docker Compose if missing
            if ! command -v docker-compose &> /dev/null; then
              echo "🔹 Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose  # Ensure it's in PATH
            else
              echo "✅ Docker Compose is already installed."
            fi

            # ✅ Verify Installations
            docker --version
            docker-compose --version

            echo "🔹 Cleaning up old Docker resources..."

            # ✅ Remove unused containers
            docker container prune -f

            # ✅ Remove unused networks
            docker network prune -f

            # ✅ Remove old images, keeping the last 5
            docker images --format "{{.ID}}" | tail -n +6 | xargs -r docker rmi -f || true

            # ✅ Remove unused volumes
            docker volume prune -f

             echo "🔹 Pulling latest Docker images..."
            docker-compose -f docker-compose.yml pull

            echo "🔹 Restarting services..."
            docker-compose -f docker-compose.yml up -d --no-deps --force-recreate

            echo "✅ Deployment successful!"
