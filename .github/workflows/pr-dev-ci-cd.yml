name: Deploy to Dev Server

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies (TurboRepo workspace-aware)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Run TurboRepo build
      - name: Build all apps using Turbo
        run: pnpm turbo run build

      # Step 6: Run TurboRepo tests
      - name: Run tests using Turbo
        run: pnpm turbo run test

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies (TurboRepo workspace-aware)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 2: Log in to Docker Hub
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Image Tag
        run: |
          export IMAGE_TAG=pr-${{ github.event.pull_request.number }}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Using IMAGE_TAG: $IMAGE_TAG"

      - name: Build Docker Images
        run: |
          docker build -t faithfulconnects/ws-server:${{ env.IMAGE_TAG }} ./apps/ws-server
          docker build -t faithfulconnects/http-server:${{ env.IMAGE_TAG }} ./apps/http-server
          docker build -t faithfulconnects/web:${{ env.IMAGE_TAG }} ./apps/web
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Push Docker Images
        run: |
          docker push faithfulconnects/ws-server:${{ env.IMAGE_TAG }}
          docker push faithfulconnects/http-server:${{ env.IMAGE_TAG }}
          docker push faithfulconnects/web:${{ env.IMAGE_TAG }}
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      # Step 6: Deploy to Development Server
      - name: Setup SSH and Install Dependencies
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          key: ${{ secrets.SSH_DEV_PRIVATE_KEY }}
          script: |
            echo "ðŸ”¹ Checking & Installing Dependencies..."

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "ðŸ”¹ Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            else
              echo "âœ… Docker is already installed."
            fi

            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              echo "ðŸ”¹ Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "âœ… Docker Compose is already installed."
            fi

            # Verify Installation
            docker --version
            docker-compose --version

      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          key: ${{ secrets.SSH_DEV_PRIVATE_KEY }}
          script: |
            echo "ðŸ”¹ Pulling latest Docker images..."
            docker pull faithfulconnects/ws-server:${{ env.IMAGE_TAG }}
            docker pull faithfulconnects/http-server:${{ env.IMAGE_TAG }}
            docker pull faithfulconnects/web:${{ env.IMAGE_TAG }}

            echo "ðŸ”¹ Stopping existing containers..."
            docker-compose down || true

            echo "ðŸ”¹ Writing updated docker-compose.yml..."
            cat > docker-compose.yml <<EOL
            services:
              ws-server:
                image: faithfulconnects/ws-server:${{ env.IMAGE_TAG }}
                environment:
                  - MONGO_URI=${{ secrets.MONGO_URI }}
                  - SUPABASE_URL=${{ secrets.SUPABASE_URL }}
                  - SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
                ports:
                  - '3001:3001'

              http-server:
                image: faithfulconnects/http-server:${{ env.IMAGE_TAG }}
                environment:
                  - MONGO_URI=${{ secrets.MONGO_URI }}
                  - SUPABASE_URL=${{ secrets.SUPABASE_URL }}
                  - SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
                ports:
                  - '3002:3002'

              web:
                image: faithfulconnects/web:${{ env.IMAGE_TAG }}
                ports:
                  - '3000:3000'
                  
            networks:
              fcn-network:
                driver: bridge
            EOL

            echo "ðŸ”¹ Restarting services..."
            docker-compose pull
            docker-compose up -d --force-recreate

            echo "âœ… Deployment successful!"
