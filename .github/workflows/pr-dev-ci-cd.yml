name: PR CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies (TurboRepo workspace-aware)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Run TurboRepo build
      - name: Build all apps using Turbo
        run: pnpm turbo run build

      # Step 6: Run TurboRepo tests
      - name: Run tests using Turbo
        run: pnpm turbo run test

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies (TurboRepo workspace-aware)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 2: Log in to Docker Hub
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Get Short SHA (7 characters)
      - name: Get Short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      # Step 4: Build Docker images with TurboRepo
      - name: Build Docker Images
        run: pnpm turbo run docker-build

      # Step 5: Push Docker images with TurboRepo
      - name: Push Docker Images
        run: pnpm turbo run docker-push

      - name: Start SSH Debugging
        uses: mxschmitt/action-tmate@v3
        

      # Step 6: Deploy using `appleboy/ssh-action`
      - name: Deploy to Dev AWS Instance
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ec2-54-162-66-62.compute-1.amazonaws.com
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            chmod +x ./deploy_dev.sh
            ./deploy_dev.sh
