name: PR CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies (TurboRepo workspace-aware)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Run TurboRepo build
      - name: Build all apps using Turbo
        run: pnpm turbo run build

      # Step 6: Run TurboRepo tests
      - name: Run tests using Turbo
        run: pnpm turbo run test

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies (TurboRepo workspace-aware)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 2: Log in to Docker Hub
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Get Short SHA (7 characters)
      - name: Get Short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      # Step 4: Build Docker images with TurboRepo
      - name: Build Docker Images
        run: pnpm turbo run docker-build

      # Step 5: Push Docker images with TurboRepo
      - name: Push Docker Images
        run: pnpm turbo run docker-push

      # Step 6: Deploy using `appleboy/ssh-action`
      - name: Deploy to Dev AWS Instance
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" &> ~/ssh_key
          mkdir -p /home/runner/.ssh
          ls /home/runner/.ssh
          touch /home/runner/.ssh/known_hosts
          echo "${{ secrets.KNOWN_HOSTS }}" &> /home/runner/.ssh/known_hosts
          chmod 700 /home/runner/ssh_key
          ssh -i ~/ssh_key ubuntu@ec2-54-162-66-62.compute-1.amazonaws.com -t "
            echo 'ðŸ”¹ Checking Docker access...'
            docker --version
            docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' -p '${{ secrets.DOCKERHUB_TOKEN }}'

            echo 'ðŸ”¹ Pulling latest Docker images...'
            docker pull faithfulconnects/ws-server:${{ env.SHORT_SHA }}
            docker pull faithfulconnects/http-server:${{ env.SHORT_SHA }}
            docker pull faithfulconnects/web:${{ env.SHORT_SHA }}

            echo 'ðŸ”¹ Stopping existing containers...'
            docker-compose down || true

            echo 'ðŸ”¹ Writing updated docker-compose.yml...'
            cat > docker-compose.yml <<EOL
          version: '3'
          services:
            ws-server:
              image: faithfulconnects/ws-server:${{ env.SHORT_SHA }}
              environment:
                - MONGO_URI=${{ secrets.MONGO_URI }}
                - SUPABASE_URL=${{ secrets.SUPABASE_URL }}
                - SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
              ports:
                - '3001:3001'

            http-server:
              image: faithfulconnects/http-server:${{ env.SHORT_SHA }}
              environment:
                - MONGO_URI=${{ secrets.MONGO_URI }}
                - SUPABASE_URL=${{ secrets.SUPABASE_URL }}
                - SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
              ports:
                - '3002:3002'

            web:
              image: faithfulconnects/web:${{ env.SHORT_SHA }}
              ports:
                - '3000:3000'

            nginx:
              image: nginx:latest
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/nginx.conf
              ports:
                - '8080:80'
              depends_on:
                - ws-server
                - http-server
                - web
          EOL

            echo 'ðŸ”¹ Restarting services...'
            docker-compose pull
            docker-compose up -d --force-recreate

            echo 'âœ… Deployment successful!'
          "
          