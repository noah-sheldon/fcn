name: Deploy Nginx

on:
  workflow_dispatch:
    inputs:
      target_server:
        description: "Select the server to deploy Nginx"
        required: true
        default: "DEV"
        type: choice
        options:
          - DEV
          - BETA
          - PROD

jobs:
  deploy-nginx:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Environment Variables Based on Target Server
        run: |
          case "${{ github.event.inputs.target_server }}" in
            DEV)
              echo "CONFIG_FILE=nginx.dev.conf" >> $GITHUB_ENV
              echo "SERVER_HOST=${{ secrets.SSH_DEV_HOST }}" >> $GITHUB_ENV
              echo "SERVER_USER=${{ secrets.SSH_DEV_USERNAME }}" >> $GITHUB_ENV
              ;;
            BETA)
              echo "CONFIG_FILE=nginx.beta.conf" >> $GITHUB_ENV
              echo "SERVER_HOST=${{ secrets.SSH_BETA_HOST }}" >> $GITHUB_ENV
              echo "SERVER_USER=${{ secrets.SSH_BETA_USERNAME }}" >> $GITHUB_ENV
              ;;
            PROD)
              echo "CONFIG_FILE=nginx.prod.conf" >> $GITHUB_ENV
              echo "SERVER_HOST=${{ secrets.SSH_PROD_HOST }}" >> $GITHUB_ENV
              echo "SERVER_USER=${{ secrets.SSH_PROD_USERNAME }}" >> $GITHUB_ENV
              ;;
            *)
              echo "‚ùå Invalid server selection!"
              exit 1
              ;;
          esac

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Nginx Docker Image
        run: |
          docker build --no-cache -t faithfulconnects/nginx:${{ github.event.inputs.target_server }} ./nginx
          docker push faithfulconnects/nginx:${{ github.event.inputs.target_server }}

      - name: Deploy Nginx on Server with Zero Downtime
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîπ Ensuring Docker network exists..."
            docker network ls | grep "ubuntu_fcn-network" || docker network create ubuntu_fcn-network

            echo "üîπ Pulling latest Nginx image..."
            docker pull faithfulconnects/nginx:${{ github.event.inputs.target_server }}

            echo "üîπ Running new Nginx container (nginx_new) without binding ports..."
            docker run -d --name nginx_new \
              -e NGINX_CONFIG=${{ env.CONFIG_FILE }} \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              --network ubuntu_fcn-network \
              --restart unless-stopped \
              faithfulconnects/nginx:${{ github.event.inputs.target_server }}

            echo "üîπ Waiting for the new container to be ready..."
            sleep 5  # Allow Nginx to initialize

            echo "üîπ Checking if new Nginx is running correctly..."
            if docker exec nginx_new nginx -t; then
              echo "‚úÖ New Nginx container is healthy. Proceeding with swap..."
              
              echo "üîπ Stopping old Nginx container..."
              docker stop nginx || true
              
              echo "üîπ Removing old Nginx container..."
              docker rm nginx || true
              
              echo "üîπ Renaming new container to nginx..."
              docker rename nginx_new nginx

              echo "üîπ Restarting new Nginx with exposed ports..."
              docker run -d --name nginx -p 80:80 -p 443:443 \
                -e NGINX_CONFIG=${{ env.CONFIG_FILE }} \
                -v /etc/letsencrypt:/etc/letsencrypt:ro \
                --network ubuntu_fcn-network \
                --restart unless-stopped \
                faithfulconnects/nginx:${{ github.event.inputs.target_server }}

              echo "‚úÖ Zero downtime deployment completed on ${{ github.event.inputs.target_server }}!"
            else
              echo "‚ùå New Nginx container failed health check. Rolling back..."
              docker stop nginx_new || true
              docker rm nginx_new || true
              exit 1
            fi
